exports.solve = function (fileName) {
  var hp = readFormula(fileName);
  var arrayTestes = nextAssignment(hp.variables);
  const resposta = doSolve(arrayTestes, hp.clauses);
  if (resposta.booleano == true && resposta.testes != null) {
    console.log('isSat\nSastifying assigment:');
    console.log(resposta.testes);
  }
  else
    console.log('Is not SAT');
}

function readFormula(fileName) {
  const fs = require('fs')
  let textlinha = fs.readFileSync('H:/Projeto IC/satmaster/' + fileName, 'utf8')
  let text = textlinha.split(/[\r\n]+/)  //H:\Projeto IC\satmaster     //    //virtualdisk.cin.ufpe.br/laapb/Projeto IC/satmaster/
  let clauses = readClauses(text)
  let variables = readVariables(clauses)
  let specOk = checkProblemSpecification(text, clauses, variables)
  let result = { 'clauses': [], 'variables': [] }
  if (specOk) {
    result.clauses = clauses
    result.variables = variables
  }
  return result
}

function nextAssignment(variables) {
  let allCombinations = [];
  for (let i = 0; i < 2 ** variables.length; i++) {
    let bin = (i).toString(2); // transforma o i pra binário
    let newArray = [];
    let x = variables.length - bin.length; //conta quantas casas deverão ser preenchidas fora o num binário
    for (let i = 0; i < x; i++) {
      bin = '0' + bin;
    }
    for (let j = 0; j < bin.length; j++) {
      if (bin.charAt(j) == 1)
        newArray.push(true);
      else
        newArray.push(false);
    }
    allCombinations.push(newArray);
  }
  return allCombinations;
}

function doSolve(arrayTestes, clausulas) {
  let stop = false;
  let resposta = {'booleano': true, 'testes': null}
  for (let contadortestes = 0; contadortestes < arrayTestes.length; contadortestes++,stop =false) {
    //if(contadortestes != (arrayTestes.length - 1))
   // stop=false;
    //testes mandados
    for (let contadorclausulas = 0; contadorclausulas < clausulas.length && stop == false; contadorclausulas++) {
      // clausulas mandadas
      if (doTest(arrayTestes[contadortestes], clausulas[contadorclausulas]) == false) {
        //se for false para o programa
        stop = true;
      } else if (contadorclausulas === (clausulas.length - 1) && stop==false) {
        //nenhum falso encontrado
        resposta = {'booleano': true, 'testes': arrayTestes[contadortestes]}
      }
        else if(contadorclausulas === (clausulas.length - 1) && contadortestes != (arrayTestes.length - 1)){
          resposta = {'booleano': false, 'testes': null}
        }
    }
  }
  if(stop==true){
    resposta = {'booleano': false, 'testes': null}
  }
  return resposta;
}

function doTest(teste, clausula) {
  //faz o teste com uma clausula e um conjunto de booleans
  let arrayClauses = clausula.split(" ");
  let stops = false;
  for (let x = 0; x < arrayClauses.length && stops == false; x++) {
    let v = Math.abs(arrayClauses[x]);
    if (arrayClauses[x] < 0 && teste[v - 1] == false)  {
      stops = true;
      return true; // se uma variável for verdadeira a cláusula é verdadeira e para o programa
    }
    if (arrayClauses[x] > 0 && teste[v - 1] == true) {
      stops = true;
      return true; // se uma variável for verdadeira a cláusula é verdadeira e para o programa
    }
  }
  if(stops==false)
  return false;
}

function readClauses(text) {
  let arrayG = "";
  let contador = 0;
  for (let i = 0; text.length > i; i++) {
    if (text[i].charAt(0) != 'c' && text[i].charAt(0) != 'p') {
      if (i != text.length - 1 && text[i].charAt(text[i].length - 1) != '0') {
        arrayG = arrayG + text[i] + " ";
      }
      else {
        arrayG = arrayG + text[i];
      }
    }
  }
  let splitter = arrayG.split(' 0');
  splitter.pop();
  //console.log(splitter);
  return splitter;
}

function readVariables(splitter) {
  var variables = [];
  var x = [];
  var cont = 0;
  for (let i = 0; i < splitter.length; i++) {
    x = splitter[i].split(' ');
    for (let j = 0; j < x.length; j++) {
      for (let z = 0; z < x.length || z < variables.length; z++) {
        if (x[j] == variables[z] || x[j] == -variables[z])
          cont++;
      }
      if (cont == 0) {
        variables.push(x[j]);
      }
      cont = 0;
    }
  }
  var tamanho = variables.length;
  for (let i = 0; i < tamanho; i++) {
    variables.splice(tamanho, 0, "0");
  }
  variables.splice(0, tamanho);
  //console.log(variables);
  return variables;
}

function checkProblemSpecification(text, variables, splitter) {
  let specification;
  let rightspec = false;
  for (let i = 0; text.length > i; i++) {
    if (text[i].charAt(0) == 'p') {
      specification = text[i].split(' ');
      i = text.length;
    }
  }
  specification.splice(0, 2);
  //console.log(specification);
  if (specification[0] == splitter.length && specification[1] == variables.length)
    rightspec = true;
  return rightspec;
  //return specification;
}
